const ERROR = 2;
const OFF = 0;

const MAX_PARAMS = 4;
const MAX_LINE_LENGTH = 120;
const MAX_NESTED_CALLBACKS = 3;
const MAX_STATEMENTS = 30;

module.exports = {
  parser: "@typescript-eslint/parser",
  parserOptions: {
    ecmaVersion: 2020,
    sourceType: "module",
    ecmaFeatures: {
      jsx: true,
    },
    project: "./tsconfig.json",
    tsconfigRootDir: __dirname,
  },
  plugins: ["@typescript-eslint", "react", "jsx-a11y", "prettier", "promise"],
  extends: [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "airbnb",
    "airbnb/hooks",
    "plugin:jsx-a11y/recommended",
    "plugin:import/typescript",
    "plugin:node/recommended",
    "prettier",
    "prettier/@typescript-eslint",
    "plugin:promise/recommended",
  ],
  env: {
    browser: true,
    node: true,
    jest: true,
    "jest/globals": true,
  },
  settings: {
    react: {
      version: "detect",
    },
    "import/resolver": {
      node: {
        extensions: [".js", ".jsx", ".ts", ".tsx"],
      },
    },
  },
  globals: {
    __APOLLO_STATE__: "readonly",
    WEBPACK_ENV: "readonly",
  },
  rules: {
    "max-len": [ERROR, MAX_LINE_LENGTH],
    "max-params": [ERROR, MAX_PARAMS],
    "no-nested-ternary": OFF,
    "no-underscore-dangle": OFF, // Used in external APIs
    camelcase: OFF, // It doesn't work well with typescript interfaces for external APIs
    quotes: [ERROR, "double", { avoidEscape: true }],
    "no-return-assign": [ERROR, "always"],
    "class-methods-use-this": OFF, // We should not check for "this" in public methods.
    "quote-props": OFF,
    "array-element-newline": [ERROR, "consistent"],
    "comma-dangle": [ERROR, "always-multiline"],
    "function-paren-newline": [ERROR, "multiline-arguments"],
    "max-nested-callbacks": [ERROR, MAX_NESTED_CALLBACKS],
    "max-statements": [ERROR, MAX_STATEMENTS],
    "func-style": [ERROR, "declaration", { allowArrowFunctions: true }],
    "consistent-this": [ERROR, "self"],
    "no-cond-assign": [ERROR, "always"],
    "no-shadow": [
      ERROR,
      {
        hoist: "all",
      },
    ],
    "space-before-function-paren": [
      "error",
      {
        anonymous: "never",
        named: "never",
        asyncArrow: "always",
      },
    ],
    "padded-blocks": [ERROR, "never"],
    "no-empty-function": [ERROR, { allow: ["constructors"] }],
    "no-unused-vars": OFF, // Delegate to @typescript-eslint

    // Plugin rules
    "@typescript-eslint/no-unused-vars": ERROR,
    "react/jsx-filename-extension": [ERROR, { extensions: [".tsx"] }],
    "react/jsx-props-no-spreading": OFF,
    "react/jsx-one-expression-per-line": OFF, // clashes with prettier
    "react-hooks/rules-of-hooks": ERROR,
    "jsx-a11y/label-has-associated-control": [
      ERROR,
      {
        labelComponents: ["Label"],
        controlComponents: ["TextInput"],
      },
    ],
    "import/prefer-default-export": OFF,
    "import/no-default-export": ERROR,
    "import/no-extraneous-dependencies": [ERROR, { devDependencies: true }],
    "prettier/prettier": ERROR,
    "node/no-unsupported-features/es-syntax": OFF,
    "node/no-unsupported-features/es-builtins": ["error", { version: "10.x" }],
    "node/no-unsupported-features/node-builtins": ["error", { version: "10.x" }],
  },

  overrides: [
    // Javascript files
    {
      files: ["*.js"],
      rules: {
        "@typescript-eslint/explicit-function-return-type": OFF,
        "global-require": OFF,
      },
    },
    // Typescript files
    {
      files: ["*.ts", "*.tsx"],
      rules: {
        "@typescript-eslint/explicit-function-return-type": ERROR,
        "@typescript-eslint/no-explicit-any": ERROR,
        "@typescript-eslint/camelcase": OFF,
      },
    },
    // Unit test files
    {
      files: ["*.test.js", "*.test.ts", "*.test.tsx"],
      globals: {
        jsdom: "readonly",
      },
      plugins: ["jest"],
      extends: ["plugin:jest/recommended"],
      rules: {
        "jest/require-top-level-describe": ERROR,
        "jest/no-try-expect": OFF,
      },
    },
    // e2e test files
    {
      files: ["./test/**/*.ts"],
      globals: {
        browser: "readonly",
        $: "readonly",
      },
      plugins: ["chai-friendly"],
      rules: {
        "@typescript-eslint/no-var-requires": OFF,
        "func-names": OFF,
        "no-unused-expressions": OFF,
        "chai-friendly/no-unused-expressions": ERROR,
      },
    },
  ],
};